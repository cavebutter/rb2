RB2 OOTP Website - Session Continuity Guide

═══════════════════════════════════════════════════════════════════════════════
📈 CURRENT PROJECT STATUS (Session 19: 2025-10-14)
═══════════════════════════════════════════════════════════════════════════════

**Session 19 Summary - ORPHANED NATIONS ISSUE RESOLVED:**

**The Problem:**
After configuring filtered game export (Session 18), orphaned nation references blocked ETL:
- ✅ Reduced reference data: 24 nations, 443 states, 3,365 cities (97% reduction!)
- ❌ Players.csv references `second_nation_id=94` which doesn't exist in filtered nations.csv
- ❌ FK violation prevented all player and stats loading
- Game export cannot be fine-tuned further to include these orphaned nations

**Solution Implemented:**
Added automatic stub nation creation to ETL (similar to existing stub logic for leagues/teams):
- New method: `PlayersLoader._create_missing_nations()` at etl/src/loaders/players_loader.py:390
- Scans players.csv for ALL nation_id references (nation_id and second_nation_id)
- Creates stub nation records for any missing nation IDs before loading players
- Stub format: name="Nation {id}", abbr="N{id}", continent_id=1

**ETL Testing:**
- ✅ Full ETL pipeline run with fresh data export
- ✅ Stub nations created automatically for orphaned references
- ✅ Players and stats loaded successfully without FK violations
- ✅ No manual intervention required for future exports

**Lessons Learned:**
- Game exports may contain orphaned references that can't be filtered at source
- ETL should be resilient and auto-create stubs for missing reference data
- Pattern established: nations (new), leagues (existing), teams (existing)
- Stub creation prevents FK violations while maintaining data integrity

═══════════════════════════════════════════════════════════════════════════════
📈 PREVIOUS STATUS (Session 17: 2025-10-13)
═══════════════════════════════════════════════════════════════════════════════

**Progress: 55% (42/77 user stories complete) | ~85 hours**

**Completed Epics:**
- ✅ Epic 1: Player Pages - 100% (18/18 stories)
- ✅ Epic 2: Team Pages - 100% (5/5 stories)
- ✅ Epic 3: Leaderboards - 82% (9/11 stories, US-L008 deferred)
- ✅ Epic 5: League/Year Pages - 100% (2/2 stories)
- ✅ Epic 6: Search & Navigation - 100% (4/4 stories)

**In Progress:**
- 🟡 Epic 4: Front Page - 83% (5/6 stories, US-F005 deferred)
- 🟡 Epic 7: Infrastructure - ~35%

**Recent Completion (Session 17):**
- ✅ **ETL Enhancement** - Database refresh with new test data completed
- ✅ **Materialized Views Fix** - Added automatic refresh after stats load
  - Created `refresh_materialized_views.sql` maintenance script
  - Added `python main.py refresh-views` CLI command
  - Integrated automatic refresh into `load-stats` command (Phase 3)
  - Updated README.md with refresh documentation
- ✅ **Stub Record Creation** - Enhanced ETL to handle missing FK references
  - Auto-creates stub leagues for missing league_ids (including negatives)
  - Auto-creates stub teams for missing team_ids (e.g., team_id=0 "Free Agents")
  - Handles OOTP's negative league_id convention (-200, -206)

**🚨 CRITICAL: NEXT SESSION PRIORITY (Session 18)**
**PERFORMANCE CRISIS - All page loads are unacceptably slow after database refresh**

The database refresh has caused performance regressions across ALL pages:
- Home page: Previously <100ms, now SLOW
- Player pages: Previously 171ms, now SLOW
- Team pages: Previously 120ms, now SLOW
- All other pages affected

**Root Cause:** Materialized views were fixed, but the previous Session 4 optimizations need to be re-verified:
1. **SQLAlchemy query optimizations** - Use load_only(), raiseload('*'), selectinload()
2. **Raw SQL queries** - Team rosters and complex queries bypassing ORM
3. **Database indexes** - Verify all indexes exist (especially partial indexes on stats tables)
4. **Service layer optimization** - Ensure all service functions use raiseload('*')

**Action Plan for Session 18:**
1. **Benchmark current performance** - Time each major page type
2. **Check database indexes** - Run query from backlog-completed.md showing expected indexes
3. **Review and re-apply Session 4 optimizations** - See US-T003 in backlog-completed.md lines 1117-1180
4. **Verify materialized views populated** - SELECT count(*) from each leaderboard view
5. **Profile slow queries** - Use Flask-DebugToolbar or PostgreSQL slow query log

**Key Files to Review:**
- `/web/app/services/team_service.py` - Should have raiseload('*') throughout
- `/web/app/routes/teams.py` - Should use raw SQL for roster query
- `/web/app/services/player_service.py` - Should use load_only() and raiseload('*')
- `/docs/backlog-completed.md` lines 1117-1180 - Complete Session 4 optimization details

═══════════════════════════════════════════════════════════════════════════════
🚨 CRITICAL PATTERNS & RULES
═══════════════════════════════════════════════════════════════════════════════

**SQLAlchemy Query Optimization (MANDATORY):**
```python
from sqlalchemy.orm import load_only, selectinload, raiseload, lazyload

# Minimal data queries
Player.query.options(load_only(Player.player_id, Player.first_name), raiseload('*'))

# With relationships
Team.query.options(selectinload(Team.league).raiseload('*'), raiseload('*'))

# Stats queries (prevent cascade)
PlayerBattingStats.query.options(lazyload('player'), lazyload('team'))

# Complex: Use raw SQL
db.session.execute(text("SELECT..."))
```

**Models with lazy='joined' (ALWAYS optimize):**
- Player: city_of_birth, nation, current_status
- Team: city, park, league, nation
- PlayerBattingStats/PlayerPitchingStats: player, team

**Critical Data Rules:**
- **ALWAYS filter team_id != 0** (excludes college/HS players from leaderboards)
- Applied at database (materialized views) AND service layer

**ETL Data Preservation:**
- `trade_history` and `messages` use incremental UPSERT (never delete)
- Configure filters in `/etl/config/etl_config.py` (MESSAGE_FILTERS)
- Images preserved via rsync --update flag
- See `/etl/docs/INCREMENTAL_LOADING.md` for details

**Materialized Views (Session 17 Fix):**
- **CRITICAL:** Views must be refreshed after loading stats data
- Automatic refresh integrated into `python main.py load-stats` (Phase 3)
- Manual refresh: `python main.py refresh-views`
- Views: leaderboard_career_batting, leaderboard_career_pitching,
  leaderboard_single_season_batting, leaderboard_single_season_pitching,
  leaderboard_yearly_batting, leaderboard_yearly_pitching
- Without refresh: leaderboards will be empty/stale (major performance issue)

═══════════════════════════════════════════════════════════════════════════════
📊 DATABASE & ENVIRONMENT
═══════════════════════════════════════════════════════════════════════════════

**Data State:**
- 18 seasons (1980-1997), current: June 1997 (in-season)
- Non-traditional league structure: 4 top-level leagues (not AL/NL)
- Images: `/etl/data/images/players/` (player_X.png, coach_X.png)
- venv: ~/virtual-envs/rb2
- App running on: http://localhost:5000

**Known Data Gaps:**
- Fielding stats empty (no ETL) - blocks US-P003
- Schools: No reference table - blocks US-P005
- Current season yearly leaders: Ranks populated, stat values NULL for 1997

**Key Components:**
- Context processor: `inject_game_date()` provides game date to all templates
- Breadcrumb macro: `/web/app/templates/_macros/breadcrumbs.html`
- Search service: `/web/app/services/search_service.py`
- Leaderboard service: `/web/app/services/leaderboard_service.py`

═══════════════════════════════════════════════════════════════════════════════
⚡ PERFORMANCE STANDARDS
═══════════════════════════════════════════════════════════════════════════════

**Target Benchmarks:**
- Detail pages: < 1s, < 20 queries
- List pages: < 500ms, < 15 queries
- Leaderboards: < 2s, < 30 queries

**Achieved:**
- Player detail: 171ms, 12 queries
- Home page: <100ms, 17 queries
- Team home: 120ms, 12 queries
- Leaderboards: <200ms (materialized views)

═══════════════════════════════════════════════════════════════════════════════
🔄 SESSION WORKFLOW
═══════════════════════════════════════════════════════════════════════════════

**Starting a Session:**
1. Read `docs/backlog-active.md` for current work
2. Review this file for critical patterns
3. Check current progress percentages

**Ending a Session:**
1. Update backlog with completed stories (mark DONE, add implementation notes)
2. Update this file with new patterns or critical discoveries only
3. Keep sessions focused: 4-8 hour blocks

**Key Files:**
- `docs/backlog-active.md` - Active work (incomplete epics only)
- `docs/backlog-completed.md` - Completed epics (Epics 1-3, 5-6, reference only)
- `docs/website-specs.md` - Original requirements
- `continuity.txt` - This file (patterns & current status)
