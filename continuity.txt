RB2 OOTP Website - Session Continuity Guide

═══════════════════════════════════════════════════════════════════════════════
📈 CURRENT PROJECT STATUS (Session 14: 2025-10-13)
═══════════════════════════════════════════════════════════════════════════════

**Progress: 49% (38/77 user stories complete) | ~71 hours**

**Completed Epics:**
- ✅ Epic 1: Player Pages - 100% (18/18 stories)
- ✅ Epic 2: Team Pages - 100% (5/5 stories)
- ✅ Epic 6: Search & Navigation - 100% (4/4 stories)

**In Progress:**
- 🟡 Epic 3: Leaderboards - 64% (7/11 stories)
- 🟡 Epic 4: Front Page - 83% (5/6 stories, US-F005 deferred)
- ⚪ Epic 5: League/Year Pages - 0%
- 🟡 Epic 7: Infrastructure - ~35%

**Recent Completion (Session 14):**
- ✅ ETL: Incremental loading for trade_history/messages (preserves all historical data)
- ✅ US-N004: Game Date Display (context processor + banner)
- ✅ US-N002: Breadcrumb Navigation (reusable macro)
- ✅ US-N003: Mobile Menu & Navigation (hamburger menu, responsive)
- ⏸️ US-F005: Magic Number (DEFERRED - field exists, needs verification)

═══════════════════════════════════════════════════════════════════════════════
🚨 CRITICAL PATTERNS & RULES
═══════════════════════════════════════════════════════════════════════════════

**SQLAlchemy Query Optimization (MANDATORY):**
```python
from sqlalchemy.orm import load_only, selectinload, raiseload, lazyload

# Minimal data queries
Player.query.options(load_only(Player.player_id, Player.first_name), raiseload('*'))

# With relationships
Team.query.options(selectinload(Team.league).raiseload('*'), raiseload('*'))

# Stats queries (prevent cascade)
PlayerBattingStats.query.options(lazyload('player'), lazyload('team'))

# Complex: Use raw SQL
db.session.execute(text("SELECT..."))
```

**Models with lazy='joined' (ALWAYS optimize):**
- Player: city_of_birth, nation, current_status
- Team: city, park, league, nation
- PlayerBattingStats/PlayerPitchingStats: player, team

**Critical Data Rules:**
- **ALWAYS filter team_id != 0** (excludes college/HS players from leaderboards)
- Applied at database (materialized views) AND service layer

**ETL Data Preservation (New):**
- `trade_history` and `messages` use incremental UPSERT (never delete)
- Configure filters in `/etl/config/etl_config.py` (MESSAGE_FILTERS)
- Images preserved via rsync --update flag
- See `/etl/docs/INCREMENTAL_LOADING.md` for details

═══════════════════════════════════════════════════════════════════════════════
📊 DATABASE & ENVIRONMENT
═══════════════════════════════════════════════════════════════════════════════

**Data State:**
- 18 seasons (1980-1997), current: June 1997 (in-season)
- Non-traditional league structure: 4 top-level leagues (not AL/NL)
- Images: `/etl/data/images/players/` (player_X.png, coach_X.png)
- venv: ~/virtual-envs/rb2
- App running on: http://localhost:5000

**Known Data Gaps:**
- Fielding stats empty (no ETL) - blocks US-P003
- Schools: No reference table - blocks US-P005
- Current season yearly leaders: Ranks populated, stat values NULL for 1997

**Key Components:**
- Context processor: `inject_game_date()` provides game date to all templates
- Breadcrumb macro: `/web/app/templates/_macros/breadcrumbs.html`
- Search service: `/web/app/services/search_service.py`
- Leaderboard service: `/web/app/services/leaderboard_service.py`

═══════════════════════════════════════════════════════════════════════════════
⚡ PERFORMANCE STANDARDS
═══════════════════════════════════════════════════════════════════════════════

**Target Benchmarks:**
- Detail pages: < 1s, < 20 queries
- List pages: < 500ms, < 15 queries
- Leaderboards: < 2s, < 30 queries

**Achieved:**
- Player detail: 171ms, 12 queries
- Home page: <100ms, 17 queries
- Team home: 120ms, 12 queries
- Leaderboards: <200ms (materialized views)

═══════════════════════════════════════════════════════════════════════════════
🔄 SESSION WORKFLOW
═══════════════════════════════════════════════════════════════════════════════

**Starting a Session:**
1. Read `docs/backlog-epics-3-9.md` for current work
2. Review this file for critical patterns
3. Check current progress percentages

**Ending a Session:**
1. Update backlog with completed stories (mark DONE, add implementation notes)
2. Update this file with new patterns or critical discoveries only
3. Keep sessions focused: 4-8 hour blocks

**Key Files:**
- `docs/backlog-epics-3-9.md` - Active work (Epics 3-9, detailed specifications)
- `docs/backlog-epics-1-2.md` - Completed work (Epics 1-2, reference only)
- `docs/website-specs.md` - Original requirements
- `continuity.txt` - This file (patterns & current status)
