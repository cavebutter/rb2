RB2 OOTP Website - Session Continuity Guide

═══════════════════════════════════════════════════════════════════════════════
🚨 CRITICAL: SQLAlchemy Query Optimization Patterns
═══════════════════════════════════════════════════════════════════════════════

**The Problem:** Models with `lazy='joined'` cause cascading eager loads that generate thousands of queries.
  - Player → City → Nation → Continent → State
  - Player → Team → Park → League → Nation
  - Team → City/Park/League chains

**Critical Learning:** `raiseload('*')` ONLY blocks accessing relationships, NOT loading them!
SQLAlchemy with `lazy='joined'` loads relationships during query construction, not access.

**Solution Patterns (MANDATORY for all new queries):**

```python
from sqlalchemy.orm import load_only, joinedload, selectinload, raiseload, lazyload
from sqlalchemy import text

# Pattern 1: Player queries with specific relationships
Player.query.options(
    joinedload(Player.city_of_birth),
    joinedload(Player.nation),
    raiseload('*')  # Blocks all other relationships
)

# Pattern 2: Minimal Player data (lists/rosters)
Player.query.options(
    load_only(Player.player_id, Player.first_name, Player.last_name),
    raiseload('*')
)

# Pattern 3: Team queries (use selectinload + nested raiseload)
Team.query.options(
    load_only(Team.team_id, Team.name, Team.nickname, Team.abbr),
    selectinload(Team.league).raiseload('*'),
    selectinload(Team.city).raiseload('*'),
    raiseload('*')
)

# Pattern 4: Stats queries (prevent cascade to player/team)
PlayerBattingStats.query.filter(...).options(
    lazyload('player'),
    lazyload('team')
)

# Pattern 5: Complex roster/list queries (bypass ORM entirely)
results = db.session.execute(text("""
    SELECT p.player_id, p.first_name, p.last_name, c.name as city_name
    FROM players_core p
    LEFT JOIN cities c ON p.city_of_birth_id = c.city_id
"""))
# Convert to simple objects for templates
```

**Models with lazy='joined' (ALWAYS optimize these):**
- Player: city_of_birth, nation, second_nation, current_status
- Team: city, park, league, nation
- PlayerBattingStats: player, team
- PlayerPitchingStats: player, team

**Reference Examples:**
- `/web/app/services/player_service.py` (lines 68-79, 208-219) - Stats queries with lazyload
- `/web/app/services/team_service.py` (lines 252-473) - Franchise queries with raiseload
- `/web/app/routes/teams.py` (lines 51-80) - Team query with selectinload pattern
- `/web/app/routes/players.py` (lines 101-147) - Player query with joinedload pattern

═══════════════════════════════════════════════════════════════════════════════
📊 Database & Environment
═══════════════════════════════════════════════════════════════════════════════

**Data State:**
- 18 seasons loaded (1980-1997)
- Current game year: 1997 (June, in-season)
- Non-traditional league structure: 4 top-level leagues (not AL/NL)
- Images: `/etl/data/images/players/` (both player_X.png and coach_X.png in same directory)

**Known Data Gaps:**
- Fielding stats: Table exists but empty (no ETL)
- Schools: Reference table doesn't exist
- Position workaround: Using players_current_status (should use fielding when available)

═══════════════════════════════════════════════════════════════════════════════
📈 Current Project Status
═══════════════════════════════════════════════════════════════════════════════

**Progress: 28% (21/76 user stories complete)**

**What's Done:**
- ✅ Epic 1: Player Pages - 100% complete (includes all coach stories)
- ✅ Epic 2: Team Pages - 100% complete (US-T001, US-T002, US-T002B, US-T003, US-T005 done)

**Active Work:**
- None - ready for next sprint

**Top Priorities (Not Started):**
- Epic 3: Leaderboards (65-85 hours) - **High business value**
- Epic 4: Front Page (25-35 hours) - 30% done
- Epic 6: Search & Navigation (16-22 hours) - Critical UX

**Deferred (Blocked by Missing Data):**
- US-P003: Fielding stats (no ETL)
- US-P005: School field (no reference table)

**New Low-Priority Stories Added:**
- US-P016: Birthplace with State/Province (2-3 hrs)
- US-P017: Draft info with team name (2-3 hrs)
- US-N004: Game date in header (1-2 hrs)

═══════════════════════════════════════════════════════════════════════════════
⚡ Performance Standards
═══════════════════════════════════════════════════════════════════════════════

**Target Benchmarks (achieve or beat these):**
- Detail pages: < 1 second, < 20 queries
- List pages: < 500ms, < 15 queries
- Leaderboards: < 2 seconds, < 30 queries
- Team home: 120ms, 12 queries ✅ (achieved)
- Team year: 300-500ms ✅ (achieved)

**Warning Signs (avoid these at all costs):**
- ❌ Team home before optimization: 28 seconds, 1,861 queries
- ❌ Team year before optimization: 30+ seconds (timeout)
- ❌ Player detail before optimization: 5-15 seconds

**Optimization Wins:**
- Team home: 99.6% faster (28s → 120ms), 99.4% fewer queries (1,861 → 12)
- Raw SQL roster query eliminated 1,849 cascading queries in single stroke

═══════════════════════════════════════════════════════════════════════════════
🔄 Session Transition Workflow
═══════════════════════════════════════════════════════════════════════════════

**Starting a New Session:**
1. Read `docs/backlog.md` → Check "Current Sprint Focus" and "Summary Statistics"
2. Review this file → Refresh on architectural patterns and current status
3. Check for any in-progress work → Look for session notes in backlog.md
4. Identify next priority → Highest value incomplete work

**Ending a Session:**
1. Update `docs/backlog.md`:
   - Mark completed stories as DONE with completion date
   - Update Summary Statistics (completion %, hours spent)
   - Add implementation notes to relevant user stories
2. Update this file ONLY if:
   - New critical architectural pattern discovered
   - New performance optimization technique learned
   - Database state changed (new data, schema changes)
3. No need to archive detailed session logs here (backlog.md has full details)

**Quick References:**
- All user stories & detailed status → `docs/backlog.md`
- Architectural patterns & session continuity → `continuity.txt` (this file)
- Original requirements → `docs/website-specs.md` 
