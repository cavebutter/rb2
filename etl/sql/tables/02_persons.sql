-- Players and Coaches Tables
-- Matching OOTP CSV export files: players.csv, coaches.csv

-- Players table (from players.csv)
-- Core player information (immutable biographical data)
CREATE TABLE IF NOT EXISTS players_core (
  player_id INTEGER PRIMARY KEY,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  nick_name VARCHAR(50),
  date_of_birth DATE,
  city_of_birth_id INTEGER,
  nation_id INTEGER,
  second_nation_id INTEGER,
  height SMALLINT,
  weight SMALLINT,
  bats SMALLINT,
  throws SMALLINT,
  person_type SMALLINT,
  language_ids0 INTEGER,
  language_ids1 INTEGER,
  historical_id VARCHAR(50),
  historical_team_id VARCHAR(50),
  college SMALLINT,
  acquired VARCHAR(50),
  acquired_date DATE,
  draft_year SMALLINT,
  draft_round SMALLINT,
  draft_supplemental SMALLINT,
  draft_pick SMALLINT,
  draft_overall_pick SMALLINT,
  draft_eligible SMALLINT,
  hsc_status SMALLINT,
  redshirt SMALLINT,
  picked_in_draft SMALLINT,
  school VARCHAR(100),
  commit_school VARCHAR(100),
  draft_league_id INTEGER,
  draft_team_id INTEGER,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (city_of_birth_id) REFERENCES cities(city_id),
  FOREIGN KEY (nation_id) REFERENCES nations(nation_id),
  FOREIGN KEY (second_nation_id) REFERENCES nations(nation_id)
);
-- Current status (changes seasonally/frequently)
  CREATE TABLE IF NOT EXISTS players_current_status (
      player_id INTEGER PRIMARY KEY,
      team_id INTEGER,
      league_id INTEGER,
      position SMALLINT,
      role SMALLINT,
      uniform_number SMALLINT,
      age SMALLINT,
      retired SMALLINT,
      free_agent SMALLINT,
      hall_of_fame SMALLINT,
      inducted SMALLINT,
      turned_coach SMALLINT,
      last_league_id INTEGER,
      last_team_id INTEGER,
      organization_id INTEGER,
      last_organization_id INTEGER,
      experience SMALLINT,
      hidden SMALLINT,
      rust SMALLINT,
      local_pop SMALLINT,
      national_pop SMALLINT,
      draft_protected SMALLINT,
      on_loan SMALLINT,
      loan_league_id INTEGER,
      loan_team_id INTEGER,
      season_year INTEGER,
      last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (player_id) REFERENCES players_core(player_id),
      FOREIGN KEY (team_id) REFERENCES teams(team_id),
      FOREIGN KEY (league_id) REFERENCES leagues(league_id)
  );
  -- Contract and compensation information
  CREATE TABLE IF NOT EXISTS players_contracts (
      player_id INTEGER,
      season_year INTEGER,
      team_id INTEGER,
      best_contract_offer_id INTEGER,
      morale SMALLINT,
      morale_mod SMALLINT,
      morale_player_performance SMALLINT,
      morale_team_performance SMALLINT,
      morale_team_transactions SMALLINT,
      morale_team_chemistry SMALLINT,
      morale_player_role SMALLINT,
      expectation SMALLINT,
      PRIMARY KEY (player_id, season_year),
      FOREIGN KEY (player_id) REFERENCES players_core(player_id)
  );

  -- Ratings, attributes, and dynamic data (stored as JSONB for flexibility)
  CREATE TABLE IF NOT EXISTS players_ratings (
      player_id INTEGER,
      season_year INTEGER,
      rating_type VARCHAR(20), -- 'personality', 'injury', 'fatigue', 'strategy'
      ratings JSONB,
      PRIMARY KEY (player_id, season_year, rating_type),
      FOREIGN KEY (player_id) REFERENCES players_core(player_id)
  );


-- Coaches table (from coaches.csv)
CREATE TABLE IF NOT EXISTS coaches (
    coach_id INTEGER PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    nick_name VARCHAR(50),
    age SMALLINT,
    date_of_birth DATE,
    city_of_birth_id INTEGER,
    nation_id INTEGER,
    weight SMALLINT,
    height SMALLINT,
    position SMALLINT,
    experience SMALLINT,
    occupation SMALLINT,
    team_id INTEGER,
    former_player_id INTEGER,
    quick_left INTEGER,
    contract_salary INTEGER,
    contract_years INTEGER,
    contract_extension_salary INTEGER,
    contract_extension_years INTEGER,
    scout_major INTEGER,
    scout_minor INTEGER,
    scout_international INTEGER,
    scout_amateur INTEGER,
    scout_amateur_preference INTEGER,
    teach_hitting INTEGER,
    teach_pitching INTEGER,
    teach_fielding INTEGER,
    handle_veterans INTEGER,
    handle_rookies INTEGER,
    handle_players INTEGER,
    strategy_knowledge INTEGER,
    heal_legs INTEGER,
    heal_arms INTEGER,
    heal_back INTEGER,
    heal_other INTEGER,
    heal_rest INTEGER,
    management_style INTEGER,
    personality INTEGER,
    hitting_focus INTEGER,
    pitching_focus INTEGER,
    training_focus INTEGER,
    teach_running INTEGER,
    prevent_legs INTEGER,
    prevent_arms INTEGER,
    prevent_back INTEGER,
    prevent_other INTEGER,
    stealing INTEGER,
    running INTEGER,
    pinchrun INTEGER,
    pinchhit_pos INTEGER,
    pinchhit_pitch INTEGER,
    hook_start INTEGER,
    hook_relief INTEGER,
    closer INTEGER,
    lr_matchup INTEGER,
    bunt_hit INTEGER,
    bunt INTEGER,
    hit_run INTEGER,
    run_hit INTEGER,
    squeeze INTEGER,
    pitch_around INTEGER,
    intentional_walk INTEGER,
    hold_runner INTEGER,
    guard_lines INTEGER,
    infield_in INTEGER,
    outfield_in INTEGER,
    corners_in INTEGER,
    shift_if INTEGER,
    shift_of INTEGER,
    opener INTEGER,
    num_pitchers INTEGER,
    num_hitters INTEGER,
    favor_speed_to_power INTEGER,
    favor_avg_to_obp INTEGER,
    favor_defense_to_offense INTEGER,
    favor_pitching_to_hitting INTEGER,
    favor_veterans_to_prospects INTEGER,
    trade_aggressiveness INTEGER,
    player_loyalty INTEGER,
    trade_frequency INTEGER,
    trade_preference INTEGER,
    value_stats INTEGER,
    value_this_year INTEGER,
    value_last_year INTEGER,
    value_two_years INTEGER,
    draft_value INTEGER,
    intl_fa_value INTEGER,
    develop_value INTEGER,
    ratings_value INTEGER,
    manager_value INTEGER,
    pitching_coach_value INTEGER,
    hitting_coach_value INTEGER,
    scout_value INTEGER,
    doctor_value INTEGER,
    busy INTEGER,
    type INTEGER,
    data INTEGER,
    days_left INTEGER,
    FOREIGN KEY (team_id) REFERENCES teams(team_id),
    FOREIGN KEY (city_of_birth_id) REFERENCES cities(city_id),
    FOREIGN KEY (nation_id) REFERENCES nations(nation_id),
    FOREIGN KEY (former_player_id) REFERENCES players(player_id)
);

-- Player images (for both players and coaches)
CREATE TABLE IF NOT EXISTS person_images (
    person_id INTEGER,
    person_type VARCHAR(10), -- 'player' or 'coach'
    image_filename VARCHAR(255),
    image_path VARCHAR(500),
    file_size INTEGER,
    season_year INTEGER DEFAULT NULL,
    last_updated DATE DEFAULT CURRENT_DATE,
    PRIMARY KEY (person_id, person_type)
);

-- Branch family tracking (special table for our storyline)
CREATE TABLE IF NOT EXISTS branch_family_members (
    person_id INTEGER,
    person_type VARCHAR(10), -- 'player' or 'coach'
    relationship_type VARCHAR(50) NOT NULL, -- 'direct', 'spouse', 'in-law', 'adopted', etc.
    generation INTEGER, -- 1st generation, 2nd, etc.
    branch_line VARCHAR(50), -- Which family branch
    relationship_notes TEXT,
    added_date DATE DEFAULT CURRENT_DATE,
    PRIMARY KEY (person_id, person_type)
);

-- Players roster status (from players_roster_status.csv)
CREATE TABLE IF NOT EXISTS players_roster_status (
    player_id INTEGER PRIMARY KEY,
    team_id INTEGER,
    league_id INTEGER,
    position INTEGER,
    role INTEGER,
    uniform_number INTEGER,
    playing_level INTEGER,
    is_active INTEGER,
    is_on_secondary INTEGER,
    is_on_dl INTEGER,
    is_on_dl60 INTEGER,
    must_be_active INTEGER,
    just_signed INTEGER,
    was_on_active INTEGER,
    was_on_secondary INTEGER,
    was_on_dl INTEGER,
    mlb_service_years INTEGER,
    secondary_service_years INTEGER,
    pro_service_years INTEGER,
    mlb_service_days INTEGER,
    secondary_service_days INTEGER,
    pro_service_days INTEGER,
    mlb_service_days_this_year INTEGER,
    secondary_service_days_this_year INTEGER,
    pro_service_days_this_year INTEGER,
    dl_days_this_year INTEGER,
    years_protected_from_rule_5 INTEGER,
    is_on_waivers INTEGER,
    designated_for_assignment INTEGER,
    irrevocable_waivers INTEGER,
    days_on_waivers INTEGER,
    days_on_waivers_left INTEGER,
    days_on_dfa_left INTEGER,
    claimed_team_id INTEGER,
    last_day_on_waivers INTEGER,
    options_used INTEGER,
    option_used_this_year INTEGER,
    has_received_arbitration INTEGER,
    was_traded INTEGER,
    trade_status INTEGER,
    FOREIGN KEY (player_id) REFERENCES players(player_id),
    FOREIGN KEY (team_id) REFERENCES teams(team_id),
    FOREIGN KEY (league_id) REFERENCES leagues(league_id)
);

-- Players contract (from players_contract.csv)
CREATE TABLE IF NOT EXISTS players_contract (
    player_id INTEGER PRIMARY KEY,
    team_id INTEGER,
    league_id INTEGER,
    position INTEGER,
    role INTEGER,
    is_major INTEGER,
    no_trade INTEGER,
    last_year_team_option INTEGER,
    last_year_player_option INTEGER,
    last_year_vesting_option INTEGER,
    next_last_year_team_option INTEGER,
    next_last_year_player_option INTEGER,
    next_last_year_vesting_option INTEGER,
    contract_team_id INTEGER,
    contract_league_id INTEGER,
    season_year INTEGER,
    salary_0 INTEGER,
    salary_1 INTEGER,
    salary_2 INTEGER,
    salary_3 INTEGER,
    salary_4 INTEGER,
    salary_5 INTEGER,
    salary_6 INTEGER,
    salary_7 INTEGER,
    salary_8 INTEGER,
    salary_9 INTEGER,
    years INTEGER,
    current_year INTEGER,
    minimum_pa INTEGER,
    minimum_pa_bonus INTEGER,
    minimum_ip INTEGER,
    minimum_ip_bonus INTEGER,
    mvp_bonus INTEGER,
    cyyoung_bonus INTEGER,
    allstar_bonus INTEGER,
    next_last_year_option_buyout INTEGER,
    last_year_option_buyout INTEGER,
    FOREIGN KEY (player_id) REFERENCES players(player_id),
    FOREIGN KEY (team_id) REFERENCES teams(team_id),
    FOREIGN KEY (league_id) REFERENCES leagues(league_id)
);